//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by CRH on 8/29/16.
//  Copyright Â© 2016 CRH. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    @IBOutlet var previewView : PreviewView!

    // MARK: View Methods -------------------------------------------------------------------------------------------------
    override func viewDidLoad() {
        super.viewDidLoad()

    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        //requestPresentationStyle(.expanded)
    }

    // MARK: Conversation Methods -------------------------------------------------------------------------------------------------
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.

        // Use this method to configure the extension and restore previously stored state.
        if let message = conversation.selectedMessage {
            // Use this method to trigger UI updates in response to the message.
             print(message.url)
            if let url = message.url, message.senderParticipantIdentifier != activeConversation?.localParticipantIdentifier {
                ServerManager.sharedInstance.fileExists(url: url, completion: { (success) in
                    if success {
                        let path = url.absoluteString
                        ServerManager.sharedInstance.downloadFile(path: path, completion: { (imageOpt, errorText) in
                            if let image = imageOpt {
                                self.previewView.setImage(newImage: image)
                            } else {
                                self.previewView.setText(message: errorText!)
                            }
                        })
                    } else {
                        self.previewView.setText(message: "That picture has expired, thanks to GhostPics!\n\nUse GhostPics to send your own expiring photos to protect your own secrets.")
                    }
                })
            }
        }
    }

    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.

        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }

    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.


    }

    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }

    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.

        // Use this to clean up state related to the deleted message.
    }

    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.

        // Use this method to prepare for the change in presentation style.
    }

    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.

        // Use this method to finalize any behaviors associated with the change in presentation style.
        previewView.sizeImageView()
    }

    internal func composeMessage(_ conversation : MSConversation, image : UIImage, idString: String) -> MSMessage? {
        let message = MSMessage(session: conversation.selectedMessage?.session ?? MSSession())
        let urlPath = cDownloadURL + idString
        guard let components = NSURLComponents(string: urlPath) else {
            print("bad url string")
            return nil
        }
        print("url: \(urlPath)")
        guard let url = components.url else {
            print("bad url components")
            return nil
        }
        message.url = url
        message.shouldExpire = true

        let layout = MSMessageTemplateLayout()
        layout.caption = "Tap to see the Ghost pic I sent you!"
        message.layout = layout

       // self.previewView.setImage(newImage: image)
        return message
    }

    // MARK: Actions -------------------------------------------------------------------------------------------------
    @IBAction func sendGhost(_ sender : UIButton) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }

        if let image = previewView.image {
            ServerManager.sharedInstance.uploadFile(image) { (fileName) in
                if let imageId = fileName {
                    if let message = self.composeMessage(conversation, image: image, idString: imageId) {
                        // Add the message to the conversation.
                        conversation.insert(message) { error in
                            if let error = error {
                                print(error)
                            }
                        }
                        self.dismiss()
                    }
                }
            }
        }
    }

    @IBAction func pickPhoto(button : UIButton) {
        let picker = UIImagePickerController()
        picker.delegate = self
        if button.tag == 3 {
            if UIImagePickerController.isSourceTypeAvailable(.camera) {
                picker.sourceType = .camera
            }
        }
        self.present(picker, animated: true, completion: {
            print("presented")
        })
    }

    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        if let image = info[UIImagePickerControllerOriginalImage] as? UIImage {
            self.previewView.setImage(newImage: image)
        }
        picker.dismiss(animated: true) {
            print("dismissed")
        }
    }

    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        picker.dismiss(animated: true) {
            print("dismissed")
        }
    }


    // MARK: Convenience Methods -------------------------------------------------------------------------------------------------


}
